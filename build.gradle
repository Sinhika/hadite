plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = mod_group_id

base {
    archivesName = mod_id
}

def getVersionAppendage() {
    if (System.env.BUILD_NUMBER)
        return System.env.BUILD_NUMBER

    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return "DEV-" + proc.text.trim()
}

version = "${minecraft_version}-${mod_version}." + getVersionAppendage()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // mappings channel: 'official', version: "${version_minecraft}"
    mappings channel: 'parchment', version: "${version_parchment}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
      // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
                        
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
             // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'haditecoal'
        }

        server {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'haditecoal'
        }
        
        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'haditecoal'
        }

        data {
            workingDirectory project.file('run')
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'simplecorelib'
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "mcmodsrepo"
        url = "file:///${project.projectDir}/../mcmodsrepo"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven { 
        name = "BucketLib"
        url = 'https://jitpack.io' 
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("simplecore-api:SimpleCoreLib:${simplecorelib_version}")
    implementation fg.deobf("fusion:Fusion:${fusion_version}")
    implementation fg.deobf("simpleores:SimpleOres2:${simpleores_version}")
    implementation fg.deobf("machines:Machines:${simple_machines_version}")
    compileOnly fg.deobf("com.github.cech12:BucketLib:${current_bucketlib_version}:api") 
    runtimeOnly fg.deobf("com.github.cech12:BucketLib:${current_bucketlib_version}")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, 
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, 
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, 
            mod_name: mod_name, 
            mod_license: mod_license, 
            version: version,
            mod_authors: mod_authors, 
            simplecorelib_version : simplecorelib_version,            
            simplecore_range: simplecore_range,
            simpleores_version: simpleores_version,
            simpleores_range: simpleores_range,
            fusion_version: fusion_version,
            fusion_range: fusion_range,
            simple_machines_version: simple_machines_version,
            simple_machines_range: simple_machines_range,
            current_bucketlib_version : current_bucketlib_version,
            buckletlib_range : buckletlib_range            
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "haditecoal",
            "Specification-Vendor": "Sinhika",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Sinhika",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'akkamaddis-hadite-coal'
            artifact jar
        }
    }
    repositories {
        maven {
            name = "mcmodsrepo"
            url "file:///${project.projectDir}/../mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
